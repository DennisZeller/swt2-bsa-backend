package de.bogenliga.application.business.wettkampftyp.api.types;

import java.time.OffsetDateTime;
import java.util.Objects;
import de.bogenliga.application.common.component.types.CommonDataObject;
import de.bogenliga.application.common.component.types.DataObject;

/**
 * Contains the values of the wettkampf business entity.
 *
 * @author Daniel Schott
 */
public class WettkampftypDO extends CommonDataObject implements DataObject {

    //What does this even do???
    //private static final long serialVersionUID = -3541537678685603149L;

    private Long wettkampftypId;
    private String wettkampftypName;


    public WettkampftypDO(final Long wettkampftypId, final String wettkampftypName,
                       final OffsetDateTime createdAtUtc, final Long createdByUserId, final Long version) {
        this.wettkampftypId = wettkampftypId;
        this.wettkampftypName = wettkampftypName;

        this.createdAtUtc = createdAtUtc;
        this.createdByUserId = createdByUserId;
        this.version = version;
    }


    /**
     * Constructor with optional parameters
     *
     * @param wettkampftypId
     * @param wettkampftypName
     * @param createdAtUtc
     * @param createdByUserId
     * @param lastModifiedAtUtc
     * @param lastModifiedByUserId
     * @param version
     */
    public WettkampftypDO(final Long wettkampftypId, final String wettkampftypName,
                       final OffsetDateTime createdAtUtc, final Long createdByUserId,
                       final OffsetDateTime lastModifiedAtUtc,
                       final Long lastModifiedByUserId,
                       final Long version) {
        this.wettkampftypId = wettkampftypId;
        this.wettkampftypName = wettkampftypName;

        this.createdAtUtc = createdAtUtc;
        this.createdByUserId = createdByUserId;
        this.version = version;
        this.lastModifiedAtUtc = lastModifiedAtUtc;
        this.lastModifiedByUserId = lastModifiedByUserId;

    }


    /**
     * Constructor with id for deleting existing entries
     *
     * @param wettkampftypId
     */
    public WettkampftypDO(final Long wettkampftypId) {
        this.wettkampftypId = wettkampftypId;
    }


    /* Autogenerated getter and setters */

    public Long getWettkampftypId() {
        return wettkampftypId;
    }


    public void setWettkampftypId(Long wettkampftypId) {
        this.wettkampftypId = wettkampftypId;
    }


    public String getWettkampftypName() {
        return wettkampftypName;
    }


    public void setWettkampftypName(String wettkampftypName) {
        this.wettkampftypName = wettkampftypName;
    }


    @Override
    public int hashCode() {
        return Objects.hash(wettkampftypId, wettkampftypName,
                createdByUserId, lastModifiedAtUtc,
                lastModifiedByUserId, version);
    }


    @Override
    public boolean equals(final Object o) {
        if (o instanceof WettkampftypDO) {
            final WettkampftypDO that = (WettkampftypDO) o;
            return (Objects.equals(getWettkampftypId(), that.getWettkampftypId())
                    && Objects.equals(getWettkampftypName(), that.getWettkampftypName()));
        }
        return false;

    }

}
